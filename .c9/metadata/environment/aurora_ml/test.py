{"filter":false,"title":"test.py","tooltip":"/aurora_ml/test.py","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":63,"column":0},"action":"insert","lines":["import boto3","import json","","# Function to execute SQL statements","def execute_statement(sql):","    client = boto3.client('rds-data')","    response = client.execute_statement(","        secretArn='arn:aws:secretsmanager:region:account-id:secret:your-secret-id',","        database='your-database',","        resourceArn='arn:aws:rds:region:account-id:db:your-db-instance',","        sql=sql","    )","    return response","","# Function to generate embeddings using Aurora ML","def generate_embeddings(text):","    sql = f\"\"\"","    SELECT aws_bedrock.invoke_model_get_embeddings(","        model_id := 'amazon.titan-embed-text-v1',","        content_type := 'application/json',","        json_key := 'embedding',","        model_input := '{{ \"inputText\": \"{text}\" }}'","    ) AS embedding;","    \"\"\"","    response = execute_statement(sql)","    return response['records'][0][0]['stringValue']","","# Function to handle chat queries","def handle_query(query):","    # Generate embedding for the user's query","    query_embedding = generate_embeddings(query)","    ","    # Retrieve stored text and generate embeddings","    sql = \"SELECT title, content FROM release_notes\"","    notes = execute_statement(sql)['records']","    ","    best_match = None","    highest_similarity = 0","    ","    for note in notes:","        title = note[0]['stringValue']","        content = note[1]['stringValue']","        ","        content_embedding = generate_embeddings(content)","        ","        # Calculate similarity (using cosine similarity or another metric)","        similarity = calculate_similarity(query_embedding, content_embedding)","        ","        if similarity > highest_similarity:","            highest_similarity = similarity","            best_match = content","    ","    return best_match if best_match else \"Sorry, I couldn't find any relevant information.\"","","# Dummy function to calculate similarity between embeddings","def calculate_similarity(embedding1, embedding2):","    # Implement your similarity calculation here","    return 1  # Placeholder","","# Example usage","user_query = \"What is iOS 17?\"","response = handle_query(user_query)","print(response)",""],"id":1}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":63,"column":0},"end":{"row":63,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1717739660572,"hash":"75554eef26d3d725288af737f1faf4b2bac7c901"}